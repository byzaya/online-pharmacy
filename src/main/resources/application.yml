openapi: "3.0.2"
info:
  title: ProPill API
  version: "1.0"
servers:
  - url: https://localhost
    variables:
      port:
        default: "8080"

components:
  responses:
    USER_NOT_FOUND_EXCEPTION:
      description: '{"code":"USER_NOT_FOUND","status":404,"message":"USER_NOT_FOUND"}'
  schemas:
    ResultError:
      type: object
      properties:
        status:
          type: integer
          example: 404
        code:
          type: string
          example: "USER_NOT_FOUND"
        message:
          type: string
          example: "USER_NOT_FOUND"
    CartDTO:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartToItemDTO'

    CartToItemDTO:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/ItemDTO'
        quantity:
          type: integer

    OrderToItemDTO:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/OrderDTO'
        item:
          $ref: '#/components/schemas/ItemDTO'
        quantity:
          type: integer

    ItemDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        manufacturer:
          type: string
        picture_url:
          type: string
        type:
          $ref: '#/components/schemas/TypeDTO'
        speciality:
          $ref: '#/components/schemas/SpecialityDTO'

    TypeDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    SpecialityDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    RoleDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    PharmacyDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        work_time:
          type: string
        phone:
          type: string

    OrderDTO:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        creation_date:
          type: string
        delivery_date:
          type: string
        sum_price:
          type: number
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemDTO'
        pharmacy:
          $ref: '#/components/schemas/PharmacyDTO'

    UserAccountDTO:
      type: object
      properties:
        id:
          type: integer
        full_name:
          type: string
        phone:
          type: string
        role:
          $ref: '#/components/schemas/RoleDTO'
        speciality:
          $ref: '#/components/schemas/SpecialityDTO'



paths:

  /api/item/all:
    get:
      tags:
        - "Item controller"
      summary: get all items (for admin)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDTO'

  /api/item/normal/all:
    get:
      tags:
        - "Item controller"
      summary: get all no receipt and receipt items (for normal users)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDTO'

  /api/item/doc/all:
    get:
      tags:
        - "Item controller"
      summary: get all items (for doctor)
      parameters:
        - in: query
          name: user_id
          required: true
          schema:
            type: integer
          description: user(doctor) id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDTO'
        '400':
          description: '{"code":"USER_NOT_DOC","status":400,"message":"USER_NOT_DOC"}'
        '404':
          $ref: '#/components/responses/USER_NOT_FOUND_EXCEPTION'

  /api/item/type:
    get:
      tags:
        - "Item controller"
      summary: get all items by type (receipt/no receipt)
      parameters:
        - in: query
          name: type_id
          required: true
          schema:
            type: integer
          description: type id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDTO'
        '404':
          description: '{"code":"TYPE_NOT_FOUND","status":404,"message":"TYPE_NOT_FOUND"}'

  /api/item/type/category:
    get:
      tags:
        - "Item controller"
      summary: get all items by special category
      parameters:
        - in: query
          name: speciality_id
          required: true
          schema:
            type: integer
          description: speciality id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDTO'
        '404':
          description: '{"code":"SPECIALITY_NOT_FOUND","status":404,"message":"SPECIALITY_NOT_FOUND"}'

  /api/item/search_result:
    get:
      tags:
        - "Item controller"
      summary: search all items contains this text
      parameters:
        - in: query
          name: search
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDTO'
        '404':
          description: '{"code":"SEARCH_NOT_FOUND","status":404,"message":"SEARCH_NOT_FOUND"}'

  /api/item/info/{item_id}:
    get:
      tags:
        - "Item controller"
      summary: get info about item
      parameters:
        - in: path
          name: item_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDTO'
        '404':
          description: '{"code":"ITEM_NOT_FOUND","status":404,"message":"ITEM_NOT_FOUND"}'

  /api/item/add:
    post:
      tags:
        - "Item controller"
      summary: add item by admin
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: price
          required: true
          schema:
            type: number
        - in: query
          name: manufacturer
          required: true
          schema:
            type: string
        - in: query
          name: picture_url
          required: true
          schema:
            type: string
        - in: query
          name: type_id
          required: true
          schema:
            type: integer
        - in: query
          name: speciality_id
          required: false
          schema:
            type: integer
            default: null
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDTO'
        '404':
          description: '{"code":"NOT_FOUND","status":404,"message":"NOT_FOUND"}'

  /api/pharmacy/all:
    get:
      tags:
        - "Pharmacy controller"
      summary: get all pharmacies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PharmacyDTO'

  /api/pharmacy/item:
    get:
      tags:
        - "Pharmacy controller"
      summary: get all pharmacies that have this drug
      parameters:
        - in: query
          name: item_id
          required: true
          schema:
            type: integer
          description: item id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PharmacyDTO'
        '404':
          description: '{"code":"ITEM_NOT_FOUND","status":404,"message":"ITEM_NOT_FOUND"}'

  /api/speciality/all:
    get:
      tags:
        - "Speciality controller"
      summary: get all specialities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecialityDTO'

  /api/speciality/{user_id}:
    get:
      tags:
        - "Speciality controller"
      summary: get speciality by doctor id
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: user id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialityDTO'
        '400':
          description: '{"code":"USER_NOT_DOC","status":400,"message":"USER_NOT_DOC"}'
        '404':
          $ref: '#/components/responses/USER_NOT_FOUND_EXCEPTION'

  /api/type/all:
    get:
      tags:
        - "Type controller"
      summary: get all types
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypeDTO'

  /api/cart/{user_id}:
    get:
      tags:
        - "Cart controller"
      summary: get all items in cart
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: user id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDTO'
        '404':
          $ref: '#/components/responses/USER_NOT_FOUND_EXCEPTION'


  /api/cart/quantity_info:
    get:
      tags:
        - "Cart controller"
      summary: get quantity info in cart by item_id and user_id
      parameters:
        - in: query
          name: item_id
          required: true
          schema:
            type: integer
        - in: query
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '404':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultError'
              examples:
                user_not_found:
                  summary: User not found
                  value:
                    code: "USER_NOT_FOUND"
                    status: 404
                    message: "USER_NOT_FOUND"
                not_found:
                  summary: Item not found
                  value:
                    code: "NOT_FOUND"
                    status: 404
                    message: "NOT_FOUND"
  /api/item/cart/add:
    post:
      tags:
        - "Cart controller"
      summary: add item into cart
      parameters:
        - in: query
          name: user_id
          required: true
          schema:
            type: integer
          description: user id
        - in: query
          name: item_id
          required: true
          schema:
            type: integer
          description: item id
        - in: query
          name: count
          required: false
          schema:
            type: integer
            default: 1
          description: count of items to add into cart
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDTO'
        '404':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultError'
              examples:
                user_not_found:
                  summary: User not found
                  value:
                    code: "USER_NOT_FOUND"
                    status: 404
                    message: "USER_NOT_FOUND"
                not_found:
                  summary: Item not found
                  value:
                    code: "NOT_FOUND"
                    status: 404
                    message: "NOT_FOUND"
  /api/cart/delete:
    delete:
      tags:
        - "Cart controller"
      summary: delete item from cart
      parameters:
        - in: query
          name: user_id
          required: true
          schema:
            type: integer
          description: user id
        - in: query
          name: item_id
          required: true
          schema:
            type: integer
          description: item id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDTO'
        '404':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultError'
              examples:
                user_not_found:
                  summary: User not found
                  value:
                    code: "USER_NOT_FOUND"
                    status: 404
                    message: "USER_NOT_FOUND"
                not_found:
                  summary: Item not found
                  value:
                    code: "NOT_FOUND"
                    status: 404
                    message: "NOT_FOUND"
  /api/orders:
    get:
      tags:
        - "Order controller"
      summary: get user orders info decrease creation date
      parameters:
        - in: query
          name: user_id
          required: true
          schema:
            type: integer
          description: user id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderToItemDTO'
        '404':
          $ref: '#/components/responses/USER_NOT_FOUND_EXCEPTION'

  /api/order:
    post:
      tags:
        - "Order controller"
      summary: place an order
      parameters:
        - in: query
          name: user_id
          required: true
          schema:
            type: integer
          description: user id
        - in: query
          name: creation_date
          required: true
          schema:
            type: string
        - in: query
          name: delivery_date
          required: true
          schema:
            type: string
        - in: query
          name: sum_price
          required: true
          schema:
            type: number
        - in: query
          name: pharmacy_id
          required: true
          schema:
            type: integer
        - name: "items"
          in: query
          required: true
          schema:
            type: array
            items:
              type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
        '404':
          description: '{"code":"NOT_FOUND","status":404,"message":"NOT_FOUND"}'

  /api/info/{user_id}:
    get:
      tags:
        - "User controller"
      summary: get user info
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: user id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccountDTO'
        '404':
          $ref: '#/components/responses/USER_NOT_FOUND_EXCEPTION'


  /api/accounts/registry:
    post:
      tags:
        - "Account"
      summary: user registration (normal user)
      parameters:
        - in: query
          name: full_name
          required: true
          schema:
            type: string
          description: full name
        - in: query
          name: phone
          required: true
          schema:
            type: string
          description: phone number
        - in: query
          name: password
          required: true
          schema:
            type: string
          description: password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccountDTO'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultError'
              examples:
                invalid_fio:
                  summary: Invalid FIO
                  value:
                    code: "INVALID_FIO"
                    status: 400
                    message: "INVALID_FIO"
                invalid_phone:
                  summary: Invalid phone
                  value:
                    code: "INVALID_PHONE"
                    status: 400
                    message: "INVALID_PHONE"
                invalid_password:
                  summary: Invalid password
                  value:
                    code: "INVALID_PASSWORD"
                    status: 400
                    message: "INVALID_PASSWORD"
        '409':
          description: '{"code":"PHONE_IS_REGISTERED","status":409,"message":"PHONE_IS_REGISTERED"}'

  /api/accounts/login:
    post:
      tags:
        - "Account"
      summary: user login (normal user)
      parameters:
        - in: query
          name: phone
          required: true
          schema:
            type: string
          description: phone number
        - in: query
          name: password
          required: true
          schema:
            type: string
          description: password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccountDTO'
        '401':
          description: '{"code":"WRONG_LOGIN_PASSWORD","status":400,"message":"WRONG_LOGIN_PASSWORD"}'

  /api/accounts/logout:
    post:
      tags:
        - "Account"
      summary: user logout (normal user)
      parameters:
        - in: query
          name: user_id
          required: true
          schema:
            type: integer
          description: user id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccountDTO'
        '404':
          $ref: '#/components/responses/USER_NOT_FOUND_EXCEPTION'
